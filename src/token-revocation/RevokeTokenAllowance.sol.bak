// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import { ERC7579ExecutorBase, ERC7579ValidatorBase, ERC7579HookBase } from "modulekit/Modules.sol";
import { IERC7579Execution, ERC7579ExecutorLib } from "modulekit/ModuleKitLib.sol";
import { IERC20 } from "forge-std/interfaces/IERC20.sol";
import { IERC721 } from "forge-std/interfaces/IERC721.sol";

enum RevocationType {
    ERC20,
    ERC721_TOKEN_ID,
    ERC721_ALL
}

struct TokenRevocation {
    address token;
    address spender;
    uint256 tokenId;
    RevocationType revocationType;
}

contract RevokeTokenAllowances is ERC7579ExecutorBase, ERC7579ValidatorBase {
    using ERC7579ExecutorLib for address;

    event RevokeExecuted(address indexed account);

    error OnlyRelayer();
    error ScheduleNotDue(address account);

    function executeRevoke(TokenRevocation[] calldata tokenRevocations) external {
        uint256 revocationsLength = tokenRevocations.length;
        IERC7579Execution.Execution[] memory revocations =
            new IERC7579Execution.Execution[](revocationsLength);

        for (uint256 i; i < revocationsLength; i++) {
            bytes memory data;
            TokenRevocation calldata revocation = tokenRevocations[i];
            if (revocation.revocationType == RevocationType.ERC20) {
                data = abi.encodeCall(IERC20.approve, (revocation.spender, 0));
            } else if (revocation.revocationType == RevocationType.ERC721_TOKEN_ID) {
                data = abi.encodeCall(IERC721.approve, (revocation.spender, revocation.tokenId));
            } else if (revocation.revocationType == RevocationType.ERC721_ALL) {
                data = abi.encodeCall(IERC721.setApprovalForAll, (revocation.spender, false));
            }
            revocations[i] = IERC7579Execution.Execution(revocation.token, 0, data);
        }

        msg.sender.execute(revocations);

        emit RevokeExecuted(msg.sender);
    }

    function name() external view override returns (string memory name) {
        return "RevokeTokenAllowances";
    }

    function version() external view override returns (string memory version) {
        return "0.0.1";
    }
}
